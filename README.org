* Background
** Procedural macros
Procedural macros allow creating syntax extensions as execution of a function. Procedural macros come in one of three flavors:
    • Function-like macros - custom!(...)
    • Derive macros - #[derive(CustomDerive)]
    • Attribute macros - #[CustomAttribute]
Procedural macros allow you to run code at compile time that operates over Rust syntax, both consuming and producing Rust syntax. You can sort of think of procedural macros as functions from an AST to another AST.

** Derive macros
Derive macros define new inputs for the derive attribute. These macros can create new items given the token stream of a struct, enum, or union. They can also define derive macro helper attributes.
Custom derive macros are defined by a public function with the proc_macro_derive attribute and a signature of (TokenStream) -> TokenStream.
The input TokenStream is the token stream of the item that has the derive attribute on it. The output TokenStream must be a set of items that are then appended to the module or block that the item from the input TokenStream is in.

* NFT
1. For create simple NFT include ~icp-token = { path = "icp-token" }~
   and ~serde = { version = "1", features = ["derive"] }~ to
~Cargo.toml~ as dependencies

2. include next ~use~ derectives:
#+BEGIN_SRC rust
  use icp_token::{Icrc7, Storage};
  use serde::{Deserialize, Serialize};
#+END_SRC

3. create struct and derive next set of
traits:
- ~icp_token::candid::CandidType~ - to make struct understandable by ICP
- ~Clone~ - required by ~CandidType~
- ~Hash~ - used to detect unicality of token
- ~Default~ - required by ~CandidType~
- ~Serialize~ - required by ~CandidType~
- ~Deserialize~ - required by ~CandidType~

#+BEGIN_SRC rust
    #[derive(icp_token::candid::CandidType, Clone, Hash, Default, Serialize, Deserialize)]
    pub struct TestToken {
        pub name: String,
        pub description: Option<String>,
    }
#+END_SRC

4. implement ~icp_token::Metadata~ crate like:
#+BEGIN_SRC rust
  impl icp_token::Metadata for Token {
      fn metadata(&self) -> String {
          serde_json::to_string(&serde_json::json!({
              "name": self.name,
              "description": self.description
          }))
          .unwrap_or_default()
      }
  }
#+END_SRC

5. create collection structure like
#+BEGIN_SRC rust
  #[derive(Icrc7, Storage, Deserialize, Serialize, Default)]
  #[icrc7(token_type = "Token")]
  #[icrc7(symbol = "TT")]
  #[icrc7(name = "Test Token")]
  pub struct TokenCollections {}
#+END_SRC


  with ~Metadata~ as any ~struct~ or ~enum~ or ~custom type~
  ,#+BEGIN_SRC rust
    type Metadata = std::collections::HashMap<String,String>
#+END_SRC

this will generate all memory code for storage (IPFS by default) and all Icrc7 necessary
functions
** query
#+BEGIN_SRC rust
  pub fn icrc7_collection_metadata() -> Metadata;
  pub fn icrc7_symbol() -> String;
  pub fn icrc7_name() -> String;
  pub fn icrc7_description() -> Option<String>;
  pub fn icrc7_logo() -> Option<String>;
  pub fn icrc7_total_supply() -> Nat;
  pub fn icrc7_supply_cap() -> Option<Nat>;
  pub fn icrc7_max_query_batch_size() -> Option<Nat>;
  pub fn icrc7_max_update_batch_size() -> Option<Nat>;
  pub fn icrc7_default_take_value() -> Option<Nat>;
  pub fn icrc7_max_take_value() -> Option<Nat>;
  pub fn icrc7_max_memo_size() -> Option<Nat>;
  pub fn icrc7_atomic_batch_transfers() -> Option<bool>;
  pub fn icrc7_tx_window() -> Option<Nat>;
  pub fn icrc7_permitted_drift() -> Option<Nat>;
  pub fn icrc7_token_metadata(token_ids: Vec<Nat>) -> Vec<Option<Metadata>>;
  pub fn icrc7_owner_of(token_ids: Vec<Nat>) -> Vec<Option<Account>>;
  pub fn icrc7_balance_of(accounts: Vec<Account>) -> Vec<Nat>;
  pub fn icrc7_tokens(prev: Option<Nat>, take: Option<Nat>) -> Vec<Nat>;
  pub fn icrc7_tokens_of(account: Account, prev: Option<Nat>, take: Option<Nat>) -> Vec<Nat>;
#+END_SRC
** update
#+BEGIN_SRC rust
  pub fn icrc7_transfer(args: Vec<TransferArg>) -> Vec<Option<TransferResult>>;
  pub fn mint(args: MintArg) -> MintResult;
  pub fn create_token(args: CreateTokenArg) -> Result<Nat, String>;
  pub fn update_token(args: UpdateTokenArg) -> Result<(), String>;
#+END_SRC

*** with
#+BEGIN_SRC rust
  pub struct TransferArg {
      pub from_subaccount: Option<Subaccount>,
      pub to: Account,
      pub token_id: Nat,
      pub memo: Option<Memo>,
      pub created_at_time: Option<u64>,
  }

  pub enum TransferError {
      NonExistingTokenId,
      InvalidRecipient,
      Unauthorized,
      TooOld,
      CreatedInFuture { ledger_time: u64 },
      Duplicate { duplicate_of: Nat },
      GenericError { error_code: Nat, message: String },
      GenericBatchError { error_code: Nat, message: String },
  }

  pub type TransferResult = Result<Nat, TransferError>;
#+END_SRC

#+BEGIN_SRC rust
  pub struct CreateTokenArg {
      pub name: String,
      pub description: Option<String>,
      pub asset_name: String,
      pub asset_content_type: String,
      pub asset_content: ByteBuf,
      pub metadata: Metadata,
      pub supply_cap: Option<u32>,
      pub author: Principal,
      pub challenge: Option<ByteBuf>,
  }

  pub struct UpdateTokenArg {
      pub id: Nat,
      pub name: Option<String>,
      pub description: Option<String>,
      pub asset_name: Option<String>,
      pub asset_content_type: Option<String>,
      pub asset_content: Option<ByteBuf>,
      pub metadata: Option<Metadata>,
      pub supply_cap: Option<u32>,
      pub author: Option<Principal>,
  }
#+END_SRC

#+BEGIN_SRC rust
  pub struct MintArg {
      pub token_id: Nat,
      pub holders: BTreeSet<Principal>,
  }

  pub enum MintError {
      NonExistingTokenId,
      SupplyCapReached,
      GenericBatchError { error_code: Nat, message: String },
  }

  pub type MintResult = Result<Nat, MintError>;

#+END_SRC
