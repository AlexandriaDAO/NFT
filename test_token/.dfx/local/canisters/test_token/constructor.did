type Account = record { owner : principal; subaccount : opt blob };
type CreateArg = record { token : TestToken; supply_cap : opt nat };
type MintArg = record { token_id : nat; holders : vec Account };
type Result = variant { Ok : nat; Err : text };
type TestToken = record { name : text; description : opt text };
type TransferArg = record {
  to : Account;
  token_id : nat;
  memo : opt blob;
  created_at_time : opt nat64;
};
type UpdateArg = record {
  token : TestToken;
  supply_cap : opt nat;
  token_id : nat;
};
service : {
  create_token : (CreateArg) -> (nat);
  icrc7_atomic_batch_transfers : () -> (bool) query;
  icrc7_balance_of : (vec Account) -> (vec nat) query;
  icrc7_default_take_value : () -> (opt nat) query;
  icrc7_description : () -> (opt text) query;
  icrc7_logo : () -> (opt text) query;
  icrc7_max_memo_size : () -> (opt nat) query;
  icrc7_max_query_batch_size : () -> (opt nat) query;
  icrc7_max_take_value : () -> (opt nat) query;
  icrc7_max_update_batch_size : () -> (opt nat) query;
  icrc7_name : () -> (text) query;
  icrc7_owner_of : (vec nat) -> (vec opt Account) query;
  icrc7_permitted_drift : () -> (opt nat) query;
  icrc7_supply_cap : () -> (opt nat) query;
  icrc7_symbol : () -> (text) query;
  icrc7_token_metadata : (vec nat) -> (vec text) query;
  icrc7_tokens : (opt nat, opt nat) -> (vec nat) query;
  icrc7_tokens_of : (Account, opt nat, opt nat) -> (vec nat) query;
  icrc7_total_supply : () -> (nat) query;
  icrc7_transfer : (vec TransferArg) -> (vec Result);
  icrc7_tx_window : () -> (opt nat) query;
  mint : (MintArg) -> (vec Result);
  update_token : (UpdateArg) -> ();
}
